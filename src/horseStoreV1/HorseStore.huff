#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() nonpayable returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER  // 0

#define macro MAIN() = takes(0) returns(0) {
    // 0x00                     // [0]
    // calldataload             // [calldata (32 bytes)]
    // 0xe0                     // [0xe0, calldata (32 bytes)]
    // shr                      // [function_selector]
    0x00 calldataload 0xe0 shr  // [function_selector]

    // updateHorseNumber selector
    // dup1                        // [function_selector, function_selector]
    // 0xcdfead2e                  // [0xcdfead2e, function_selector, function_selector]
    // eq                          // [function_selector == 0xcdfead2e, function_selector] true if func selector matches
    // updateJump                  // [updateHorseNumberProgramCounter, true/false, function_selector]
    // jumpi                       // [function_selector]
    dup1 __FUNC_SIG(updateHorseNumber) eq updateJump jumpi

    // 0xe026c017                  // [0xe026c017, function_selector]
    // eq                          // [function_selector == 0xe026c017] true if func selector matches
    // readJump                    // [readJump, true/false]
    // jumpi                       // []
    __FUNC_SIG(readNumberOfHorses) eq readJump jumpi

    0x00 0x00 revert            // []

    updateJump: 
        SET_NUMBER_OF_HORSES()
    readJump:
        GET_NUMBER_OF_HORSES()

}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    0x04                             // [0x04]
    calldataload                     // [value]
    [NUMBER_OF_HORSES_STORAGE_SLOT]  // [storage_slot, value]
    sstore
    stop
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    [NUMBER_OF_HORSES_STORAGE_SLOT]  // [index]
    sload                            // [value]
    0x00                             // [0, value]
    mstore                           // []     // Memory: [value]
    // 0x20 == 32 bytes
    0x20 0x00 return                 // []
}
